steps:
  - id: "gcp api enable"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    args:
      ["gcloud", "services", "enable", "cloudresourcemanager.googleapis.com"]

  - id: "store app verion"
    name: node
    entrypoint: bash
    args:
      - -c
      - |
        # Save package.json app version to persistent volume mount: "/workspace"
        echo $(node -p -e "require('./ui/package.json').version") > /workspace/app_version.txt

  - id: "build web ui"
    name: "gcr.io/cloud-builders/docker"
    entrypoint: "sh"
    args:
      - -c
      - |
        cd ui/
         echo $(cat ../app_version.txt)
        docker build -t gcr.io/${_PROJECT_ID}/${_PROJECT_ID}-ui:$(cat ../app_version.txt) -t gcr.io/${_PROJECT_ID}/${_PROJECT_ID}-ui:latest .
        docker push gcr.io/${_PROJECT_ID}/${_PROJECT_ID}-ui:$(cat ../app_version.txt)
        docker push gcr.io/${_PROJECT_ID}/${_PROJECT_ID}-ui:latest

  - id: "tf init"
    name: "hashicorp/terraform:1.0.0"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        if [ -d "infra/lz/${_ENV}/" ]; then
          cd infra/lz/${_ENV}/
          terraform init -var-file=terraform.tfvars
        fi

  - id: "tf plan"
    name: "hashicorp/terraform:1.0.0"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        if [ -d "infra/lz/${_ENV}/" ]; then
          cd infra/lz/${_ENV}/
          printf "\nIMAGE_VERSION=\"$(cat ../../../app_version.txt)\"" >> terraform.tfvars
          printf $(cat terraform.tfvars)
          terraform plan -var-file=terraform.tfvars
        fi

#      else
#        for dir in infra/lz/*/
#        do
#          cd ${dir}
#          env=${dir%*/}
#          env=${env#*/}
##          echo ""
#         echo "*************** TERRAFORM INIT ******************"
#         echo "******* At environment: ${env} ********"
#         echo "*************************************************"
#         terraform init || exit 1
#         cd ../../../
#       done
#       fi

#- id: tf plan
#  name: 'hashicorp/terraform:1.0.0'
#  entrypoint: sh
#  args:
#    - '-c'
#    - |
#      if [ -d "infra/lz/${_ENV}/" ]; then
#        cd infra/lz/${_ENV}/
#        terraform plan -var-file=env.tfvars
#      else
#        for dir in infra/lz/*/
#        do
#          cd ${dir}
#          env=${dir%*/}
#          env=${env#*/}
#          echo ""
#          echo "*************** TERRAFOM PLAN ******************"
#          echo "******* At environment: ${env} ********"
#          echo "*************************************************"
#          terraform plan || exit 1
#          cd ../../../
#        done
#     fi

# [START tf-apply]
#- id: 'tf apply'
#  name: 'hashicorp/terraform:1.0.0'
#  entrypoint: 'sh'
#  args:
#  - '-c'
#  - |
#      if [ -d "infra/lz/${_ENV}/" ]; then
#        cd infra/lz/${_ENV}/
#        terraform apply -var-file=env.tfvars  -auto-approve
#      else
#        echo "***************************** SKIPPING APPLYING *******************************"
#        echo "Branch '$BRANCH_NAME' does not represent an oficial environment."
#        echo "*******************************************************************************"
#      fi
# [END tf-apply]
