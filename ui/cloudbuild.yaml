steps:
  - id: "store app verion"
    name: node
    entrypoint: bash
    args:
      - -c
      - |
        # Save package.json app version to persistent volume mount: "/workspace"
        echo $(node -p -e "require('./ui/package.json').version") > /workspace/app_version.txt

  - id: "build web ui"
    name: "gcr.io/cloud-builders/docker"
    entrypoint: "sh"
    args:
      - -c
      - |
        cd ui/
         echo $(cat ../app_version.txt)
        docker build -t gcr.io/${_PROJECT_ID}/${_PROJECT_ID}-ui:$(cat ../app_version.txt) -t gcr.io/${_PROJECT_ID}/${_PROJECT_ID}-ui:latest .
        docker push gcr.io/${_PROJECT_ID}/${_PROJECT_ID}-ui:$(cat ../app_version.txt)
        docker push gcr.io/${_PROJECT_ID}/${_PROJECT_ID}-ui:latest

  - id: "tf init"
    name: "hashicorp/terraform:1.0.0"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        if [ -d "infra/app/${_ENV}/" ]; then
          cd infra/app/${_ENV}/
          terraform init -var-file=terraform.tfvars
        fi

  - id: "tf plan"
    name: "hashicorp/terraform:1.0.0"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        if [ -d "infra/app/${_ENV}/" ]; then
          cd infra/app/${_ENV}/
          printf "\nIMAGE_VERSION=\"$(cat ../../../app_version.txt)\"" >> terraform.tfvars
          printf $(cat terraform.tfvars)
          terraform plan -var-file=terraform.tfvars
        fi

  - id: "tf apply"
    name: "hashicorp/terraform:1.0.0"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        if [ -d "infra/app/${_ENV}/" ]; then
          cd infra/app/${_ENV}/
          terraform apply -var-file=terraform.tfvars -auto-approve
        fi
